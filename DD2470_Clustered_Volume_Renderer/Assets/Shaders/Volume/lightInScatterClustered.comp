#line 2 1
//#version 460 core

layout(rgba16f, binding=0) uniform image3D img_VolumeScatterAndExtinction;
layout(rgba16f, binding=1) uniform image3D img_VolumeEmissionAndPhase;

layout(binding=1) uniform sampler3D img_VolumeHistory;

// #include "common.glsl"

// Defined in common.glsl..
/*layout(std140, row_major, binding=0) uniform ViewData
{
    mat4 u_InverseProjectionMatrix;
    mat4 u_InverseViewMatrix;
    vec3 u_GridSize;
    uvec2 u_ScreenDimentions;
    float u_zNear;
    float u_zFar;
};*/

layout(location=0) uniform vec3 u_CameraPosition;

struct PointLight
{
	vec4 PositionAndInvSqrRadius;
	vec4 ColorAndSqrRadius;
};

layout(std430, row_major, binding=1) readonly buffer PointLights
{
	PointLight ssbo_lights[];
};

layout(std430, binding=2) readonly buffer LightIndex
{
    uint ssbo_lightIndexList[];
};

struct LightGridCell
{
    uint Offset;
    uint Count;
};

layout(std430, binding=3) readonly buffer LightGrid
{
    LightGridCell ssbo_lightGrid[];
};

float SmoothDistanceAttenuation(float squareDistance, float invSquareRadius)
{
	float factor = squareDistance * invSquareRadius;
	float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);
	return smoothFactor * smoothFactor;
}

// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float CalcPointLightAttenuation6(float squareDistance, float invSquareRadius)
{
	float attenuation = 1.0 / max(squareDistance, 0.1*0.1);
	attenuation *= SmoothDistanceAttenuation(squareDistance, invSquareRadius);
	return attenuation;
}

const float INV_4PI = 0.07957747154;

float HenyeyGreenstein(float cosTheta, float g)
{
    float g2 = g * g;
    float numerator = (1 - g2);
    float denom = 1 + g2 - 2*g*cosTheta;
    denom = sqrt(denom * denom * denom);
    return INV_4PI * numerator / denom;
}

vec3 intersectZPlane(vec3 direction, float zPlane)
{
    // Is it direction.z or -direction.z?
    return (zPlane / direction.z) * direction;
}

const vec3 COLORS[] = vec3[](
	vec3(0, 0, 0),
	vec3(1, 0, 0),
	vec3(0.5, 0, 1),
	vec3(0, 0.5, 1),
	vec3(0, 1, 0),
	vec3(1, 0.5, 0),
	vec3(1, 0, 0.5),
	vec3(0, 0, 1),
	vec3(1, 1, 0),
	vec3(0.5, 1, 0),
	vec3(0, 1, 0.5),
	vec3(1, 0, 1),
	vec3(0, 1, 1),
	vec3(1, 1, 1));

// FIXME: Is this a good local size?
layout(local_size_x=16, local_size_y=9, local_size_z=4) in;
void main()
{
    ivec3 imageCoord = ivec3(gl_GlobalInvocationID);
    
    // scattering and absorbtion
    vec4 scatterAndAbsorbtion = imageLoad(img_VolumeScatterAndExtinction, imageCoord);
    vec4 emissionAndPhase = imageLoad(img_VolumeEmissionAndPhase, imageCoord);

    uint clusterIndex = CellPositionToCusterIndex(gl_GlobalInvocationID);
    uint lightOffset = ssbo_lightGrid[clusterIndex].Offset;
    uint lightCount = ssbo_lightGrid[clusterIndex].Count;

    vec3 historyUV = GetVolumeUV(GetCellPositionWorldSpace(gl_GlobalInvocationID, vec3(0.5)), u_PrevViewProjectionMatrix);
    float historyAlpha = u_HistoryBlend;
    uint sampleCount = 1;
    if (any(lessThan(historyUV, vec3(0))) || any(greaterThan(historyUV, vec3(1))))
    {
        historyAlpha = 0;
        sampleCount = 1;
    }

    vec3 inscatter = vec3(0);
    for (uint i = 0; i < lightCount; i++)
    {
        uint lightIndex = ssbo_lightIndexList[i];
        PointLight light = ssbo_lights[lightIndex];

        vec3 incoming = vec3(0);
        for(uint j = 0; j < sampleCount; j++)
        {
            float viewDepth = 0.0;
            vec3 world = GetCellPositionWorldSpace(gl_GlobalInvocationID, vec3(u_JitterOffsets[j]), viewDepth);
            vec3 lightDirection =  light.PositionAndInvSqrRadius.xyz - world.xyz;
            float distanceSquare = dot(lightDirection, lightDirection);
            float attenuation = CalcPointLightAttenuation6(distanceSquare, light.PositionAndInvSqrRadius.w);

            vec3 cameraDirection = normalize(world.xyz - u_CameraPosition);
            float cosTheta = dot(cameraDirection, normalize(lightDirection));

            float p = HenyeyGreenstein(cosTheta, emissionAndPhase.w);

            // Approximate optical depth to the light. This can be done much better!
            float opticalDepth = min(exp(-sqrt(distanceSquare) * 0.055), 1.0);
            opticalDepth = 1;

            incoming += light.ColorAndSqrRadius.rgb * attenuation * opticalDepth * p;
        }
        incoming /= sampleCount;

        inscatter += incoming;
    }

    float extinction = scatterAndAbsorbtion.w + luminance(scatterAndAbsorbtion.rgb);
    vec4 inScatterAndExtinction = vec4(inscatter * scatterAndAbsorbtion.rgb + emissionAndPhase.rgb, extinction);

    if (historyAlpha > 0)
    {
        vec4 historyInScatterAndExtinction = texture(img_VolumeHistory, historyUV);
        inScatterAndExtinction = mix(historyInScatterAndExtinction, inScatterAndExtinction, historyAlpha);
    }

    //inScatterAndExtinction.rgb = historyUV;
    //inScatterAndExtinction.w = historyAlpha;

    // FIXME: Detect nan or inf?
    imageStore(img_VolumeScatterAndExtinction, imageCoord, inScatterAndExtinction);
    //imageStore(img_VolumeEmissionAndPhase, imageCoord, vec4(COLORS[lightCount % COLORS.length()], 1.0));
}