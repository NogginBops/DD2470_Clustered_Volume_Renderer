#version 460 core

layout(rgba16f, binding=0) uniform writeonly image3D img_VolumeScatterAndExtinction;
layout(rgba16f, binding=1) uniform writeonly image3D img_VolumeEmissionAndPhase;

layout(std140, row_major, binding=0) uniform ViewData
{
    mat4 inverseProjectionMatrix;
    mat4 inverseViewMatrix;
    uvec2 screenDimentions;
    float zNear;
    float zFar;
};

layout(location=0) uniform float FogTopHeight;
layout(location=1) uniform float FogBottomHeight;
layout(location=2) uniform float FogDensityFactor;
layout(location=3) uniform float FogDensityScale;

vec3 intersectZPlane(vec3 direction, float zPlane)
{
    // Is it direction.z or -direction.z?
    return (zPlane / direction.z) * direction;
}

// FIXME: Is this a good local size?
layout(local_size_x=16, local_size_y=9, local_size_z=4) in;
void main()
{
    uvec2 tileSizePx = screenDimentions / (gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    // FIXME: Maybe offset this by 0.5 to center voxels?
    ivec3 imageCoord = ivec3(gl_GlobalInvocationID);
    // Offset coord to center of the froxel
    vec3 screenCoord = vec3(gl_GlobalInvocationID + 0.5);

    // FIXME: 72
    float z  = -zNear * pow(zFar/ zNear, screenCoord.z / 96);

    // FIXME: what should the Z coordinate here really be?
    vec3 clipCoord = vec3(vec2(screenCoord.xy * tileSizePx) / screenDimentions, -1);
    clipCoord.xy = clipCoord.xy * 2 - 1;
    vec4 view = vec4(clipCoord, 1.0) * inverseProjectionMatrix;
    view.xyz /= view.w;

    vec3 viewZ = intersectZPlane(view.xyz, z);

    vec3 world = vec3(vec4(viewZ, 1.0) * inverseViewMatrix);

    float fogDensity = FogDensityScale * exp(-FogDensityFactor * ((world.y - FogBottomHeight) / (FogTopHeight - FogBottomHeight)));

    fogDensity = min(max(fogDensity, 1.0), 0.00001);

    float g = 0;

    if (world.y < FogBottomHeight && world.x < 0 && world.z < 0)
    {
        fogDensity = 100 * FogDensityScale;
        g = 0.1;
    }
    else
    {
        fogDensity = 0;
        g = 0.999;
    }

    // Now we have to worldspace coordinate of the voxel
    // FIXME: Transfer scatter?
    // FIXME: Phase function
    // FIXME: Emission?
    imageStore(img_VolumeScatterAndExtinction, imageCoord, vec4(world.xyz, fogDensity * 0.0001));
    imageStore(img_VolumeEmissionAndPhase, imageCoord, vec4(clipCoord, g));
}