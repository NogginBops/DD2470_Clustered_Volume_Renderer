#line 2 1
//#version 460 core

layout(rgba16f, binding=0) uniform writeonly image3D img_VolumeScatterAndExtinction;
layout(rgba16f, binding=1) uniform writeonly image3D img_VolumeEmissionAndPhase;

// #include "common.glsl"

// Defined in common.glsl..
/*layout(std140, row_major, binding=0) uniform ViewData
{
    mat4 u_InverseProjectionMatrix;
    mat4 u_InverseViewMatrix;
    vec3 u_GridSize;
    uvec2 u_ScreenDimentions;
    float u_zNear;
    float u_zFar;
};*/

layout(location=0) uniform float FogTopHeight;
layout(location=1) uniform float FogBottomHeight;
layout(location=2) uniform float FogDensityFactor;
layout(location=3) uniform float FogDensityScale;

vec3 intersectZPlane(vec3 direction, float zPlane)
{
    // Is it direction.z or -direction.z?
    return (zPlane / direction.z) * direction;
}

// FIXME: Is this a good local size?
layout(local_size_x=16, local_size_y=9, local_size_z=4) in;
void main()
{
    ivec3 imageCoord = ivec3(gl_GlobalInvocationID);

    float viewDepth = 0.0;
    vec3 world = GetCellPositionWorldSpace(gl_GlobalInvocationID, vec3(0.5), viewDepth);

    float fogHeight = max(world.y - FogBottomHeight, 0.0);
    float fogDensity = FogDensityScale * exp(-FogDensityFactor * fogHeight);

    //fogDensity = clamp(fogDensity, 0.0, 1.0);

    float extinction = max(0.0, fogDensity * 0.24 * u_GlobalAlbedoAndGlobalExtinctionScale.w);
    vec3 scatter = u_GlobalAlbedoAndGlobalExtinctionScale.rgb * extinction;
    float absorbtion = max(0.0, extinction - luminance(scatter));
    //absorbtion = 0.0005;
    vec3 emission = u_GlobalEmissiveAndGlobalPhaseG.rgb * extinction;
    float g = u_GlobalEmissiveAndGlobalPhaseG.w;

    // FIXME: density multiplier??
    imageStore(img_VolumeScatterAndExtinction, imageCoord, vec4(scatter, absorbtion));
    imageStore(img_VolumeEmissionAndPhase, imageCoord, vec4(vec3(emission), g));
}