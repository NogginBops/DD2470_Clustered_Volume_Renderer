#line 2 1
//#version 460 core

layout(rgba16f, binding=0) uniform writeonly image3D img_VolumeScatterAndExtinction;
layout(rgba16f, binding=1) uniform writeonly image3D img_VolumeEmissionAndPhase;

// #include "common.glsl"

// Defined in common.glsl..
/*layout(std140, row_major, binding=0) uniform ViewData
{
    mat4 u_InverseProjectionMatrix;
    mat4 u_InverseViewMatrix;
    vec3 u_GridSize;
    uvec2 u_ScreenDimentions;
    float u_zNear;
    float u_zFar;
};*/

layout(location=0) uniform float FogTopHeight;
layout(location=1) uniform float FogBottomHeight;
layout(location=2) uniform float FogDensityFactor;
layout(location=3) uniform float FogDensityScale;

vec3 intersectZPlane(vec3 direction, float zPlane)
{
    // Is it direction.z or -direction.z?
    return (zPlane / direction.z) * direction;
}

// FIXME: Is this a good local size?
layout(local_size_x=16, local_size_y=9, local_size_z=4) in;
void main()
{
    ivec3 imageCoord = ivec3(gl_GlobalInvocationID);

    float density = 0.0;
    vec3 scatter = vec3(0);
    float g = 0;
    vec3 emission = vec3(0);

    for (uint i = 0; i < u_JitterOffsets.length(); i++)
    {
        float viewDepth = 0.0;
        vec3 world = GetCellPositionWorldSpace(gl_GlobalInvocationID, vec3(0.5), viewDepth);

        float fogDensity = FogDensityScale * exp(-FogDensityFactor * ((world.y - FogBottomHeight) / (FogTopHeight - FogBottomHeight)));

        fogDensity = clamp(fogDensity, 0.00001, FogDensityScale);

        density += fogDensity;
        scatter += vec3(1, 1, 1) * fogDensity;
        g += clamp(1 - fogDensity, 0.01, 0.99);
        //g += 0.8

        // FIXME: Emission?
        if (world.y < FogBottomHeight && world.x < 0 && world.z < 0)
        {
            //scatter += vec3(0.7, 0.7, 0.7);
            //density += 100 * fogDensity;
            //g += 0.1;
        }
        else
        {
            //scatter += vec3(0, 0, 0);
            //density += 0;
            //g += 0.999;
        }
    }
    density  /= u_JitterOffsets.length();
    scatter  /= u_JitterOffsets.length();
    g        /= u_JitterOffsets.length();
    emission /= u_JitterOffsets.length();

    // FIXME: density multiplier??
    imageStore(img_VolumeScatterAndExtinction, imageCoord, vec4(scatter, density));
    imageStore(img_VolumeEmissionAndPhase, imageCoord, vec4(vec3(emission), g));
}